// Generated by CoffeeScript 2.1.0
// This file was adapted from infragram-js:
// http://github.com/p-v-o-s/infragram-js.
module.exports = window.FileUpload = {

  socket: null,
  file: null,
  serverFilename: "",

  isLoadedFromFile: function() {
    if (FileUpload.file) {
      return true;
    } else {
      return false;
    }
  },

  getFilename: function() {
    return FileUpload.serverFilename;
  },

  setFilename: function(name) {
    return FileUpload.serverFilename = name;
  },

  uploadThumbnail: function(src, callback) {
    var img;
    img = new Image();
    img.onload = function onImageLoad() {
      var canvas, ctx, dataUrl;
      canvas = document.createElement("canvas");
      ctx = canvas.getContext("2d");
      canvas.width = 260;
      canvas.height = 195;
      ctx.drawImage(this, 0, 0, this.width, this.height, 0, 0, canvas.width, canvas.height);
      callback = callback.toString();
      dataUrl = canvas.toDataURL("image/jpeg");
      return FileUpload.socket.emit("thumbnail_start", {
        "name": FileUpload.serverFilename,
        "data": dataUrl,
        "callback": callback
      });
    };
    return img.src = src;
  },

  fromFile: function(files, callback, upload) {
    var reader;
    if (files && files[0]) {
      $("#file-sel").prop("disabled", true);
      $("#save-modal-btn").prop("disabled", true);
      FileUpload.file = files[0];
      FileUpload.file.reader = new FileReader();
      if (upload) {
        FileUpload.file.reader.onload = function onReaderLoad(event) {
          return FileUpload.socket.emit("image_send", {
            "name": FileUpload.serverFilename,
            "size": FileUpload.file.size,
            "data": event.target.result
          });
        };
        FileUpload.socket.emit("image_send", {
          "name": files[0].name,
          "size": files[0].size
        });
      }
      FileUpload.file.uploaded = 0;
      reader = new FileReader();
      reader.onload = function onReaderLoad(event) {
        var img;
        img = new Image();
        img.onload = function onImageLoad() {
          return callback(this);
        };
        return img.src = event.target.result;
      };
      return reader.readAsDataURL(files[0]);
    }
  },

  duplicate: function(callback) {
    callback = callback.toString();
    return FileUpload.socket.emit("duplicate_start", {
      "name": FileUpload.serverFilename,
      "callback": callback
    });
  },

  fromBase64: function(name, data, callback) {
    callback = callback.toString();
    return FileUpload.socket.emit("base64_start", {
      "name": name,
      "data": data,
      "callback": callback
    });
  },

  initialize: function(options) {
    options = options || {};
    options.rememberTransport = options.rememberTransport || false;
    options.transports = options.transports || ['websocket', 'AJAX long-polling'];

    if (options.socket) {
      FileUpload.socket = io.connect(window.location.protocol + "//" + window.location.host, options);
      FileUpload.socket.on("image_request", function(data) {
        var file, newFile, txt;
        file = FileUpload.file;
        txt = $("#save-modal-btn").html().split(/\s-\s/g)[0];
        txt += " - " + Math.round((file.uploaded / file.size) * 100) + "%";
        $("#save-modal-btn").html(txt);
        newFile = file.slice(file.uploaded, file.uploaded + Math.min(data["chunk"], file.size - file.uploaded));
        FileUpload.file.uploaded += data["chunk"];
        FileUpload.serverFilename = data["name"];
        return file.reader.readAsDataURL(newFile);
      });
      FileUpload.socket.on("image_done", function(data) {
        var txt;
        if (data["error"]) {
          alert(data["error"]);
        } else {
          FileUpload.serverFilename = data["name"];
        }
        txt = $("#save-modal-btn").html().split(/\s-\s/g)[0];
        $("#save-modal-btn").html(txt);
        $("#file-sel").prop("disabled", false);
        return $("#save-modal-btn").prop("disabled", false);
      });
      FileUpload.socket.on("base64_done", function(data) {
        FileUpload.serverFilename = data["name"];
        eval("var callback=" + data["callback"]);
        return callback();
      });
      FileUpload.socket.on("duplicate_done", function(data) {
        if (data["error"]) {
          return alert(data["error"]);
        } else {
          FileUpload.serverFilename = data["name"];
          eval("var callback=" + data["callback"]);
          return callback();
        }
      });
      FileUpload.socket.on("thumbnail_done", function(data) {
        eval("var callback=" + data["callback"]);
        return callback();
      });
    }

  }
}
